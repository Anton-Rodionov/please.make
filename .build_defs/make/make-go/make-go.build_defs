GO_PACKAGE_TARGET = 'package'

def system_make_protoc_tool(name:str, version:str):
    protoc_archive_target = f'_{name}#archive'

    http_archive(
        name = protoc_archive_target,
        urls = [f'https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-$XOS-$XARCH.zip']
    )

    return build_rule(
        name = name,
        binary = True,
        srcs = [':' + protoc_archive_target],
        cmd = 'mv $SRC/bin/protoc $OUT && chmod +x $OUT',
        outs = ['protoc'],
    )

def make_go_get_binary(name:str, package:str, version:str):
    return build_rule(
        name = name,
        building_description = f'Go getting {name}...',
        binary = True,
        cmd = ' && '.join([
            f'$TOOLS_GO mod init {name}',
            f'GO111MODULE=on $TOOLS_GO get {package}@{version}',
            f'chmod -R +w ~/go', # fix go get default permissions (0444) so plz can clean up between builds
            f'mv ~/go/bin/$(basename {package}) $OUT'
        ]),
        outs = [name],
        tools = {
            'go': ['go']
        }
    )

def make_go_vendor(name:str='vendor'):
    return filegroup(
        name = name,
        srcs = ['go.mod', 'go.sum']
    )

def make_go_package(srcs:list=[], deps:list=[], resources:list=[]):
    vendor_deps = check_config(key='GO_VENDOR_DEPS', example='//example_go:vendor')
    go_root, _ = decompose(vendor_deps)

    if not srcs:
        srcs = glob(['*.go'])

    transitive_deps = build_rule(
        name = GO_PACKAGE_TARGET,
        tag = 'transitive_deps',
        srcs = srcs,
        cmd = 'cd $PKG && $TOOLS_GO list -f "{{join .Imports \\"\\n\\"}}" | '
            + f'grep {go_root} || true',
        tools = {
            'go': ['go']
        },
        post_build = lambda rule_name, output: [
            add_dep(GO_PACKAGE_TARGET, '//' + line + ':' + GO_PACKAGE_TARGET) for line in output if line
        ]
    )

    return filegroup(
        name = GO_PACKAGE_TARGET,
        srcs = srcs + resources,
        deps = deps + [transitive_deps]
    )

def make_go_binary(name:str=(basename(package_name())), deps:list=[]):
    vendor_deps = check_config(key='GO_VENDOR_DEPS', example='//example_go:vendor')

    return build_rule(
        name = name,
        building_description = 'Compiling go...',
        cmd = ' && '.join([
            'pushd $PKG && HOME=$(eval echo ~$(whoami)) $TOOLS_GO build -o $NAME . && popd',
            'mv $PKG/$NAME $OUTS'
        ]),
        tools = {
            'go': ['go']
        },
        pass_env = ['GOCACHE', 'GOPATH'],
        outs = [name],
        binary = True,
        deps = deps + [':' + GO_PACKAGE_TARGET] + [vendor_deps],
        needs_transitive_deps = True
    )

def make_go_test(name:str=(basename(package_name())+'-test'), deps:list=[]):
    vendor_deps = check_config(key='GO_VENDOR_DEPS', example='//example_go:vendor')
    junit_tool = '//.build_defs/make/make-go:go-junit-report'

    return build_rule(
        name = name,
        test_cmd = ' && '.join([
            'source $TEST/.test_env',
            '$TEST/$NAME -test.v | $TOOLS_JUNIT | tee $RESULTS_FILE'
        ]),
        cmd = ' && '.join([
            'mkdir -p $OUTS',
            'echo "export TOOLS_JUNIT=$TOOLS_JUNIT" >> $OUTS/.test_env',
            'pushd $PKG && HOME=$(eval echo ~$(whoami)) $TOOLS_GO test -c -o $NAME . && popd',
            'mv $PKG/$NAME $OUTS/'
        ]),
        tools = {
            'go': ['go'],
            'junit': [junit_tool],
        },
        pass_env = ['GOCACHE', 'GOPATH'],
        outs = [f'{name}.testpack'],
        deps = deps + [':' + GO_PACKAGE_TARGET] + [vendor_deps],
        needs_transitive_deps = True,
        binary = True,
        test = True
    )

def make_go_proto(name:str, srcs:list, grpc:bool=False, deps:list=[]):
    protoc_tool = '//.build_defs/make/make-go:protoc'
    protoc_gen_go = '//.build_defs/make/make-go:protoc-gen-go'

    protoc_flags = '--go_out=plugins=grpc:.' if grpc else '--go_out=.'

    return sh_cmd(
        name = name,
        srcs = srcs,
        cmd = f'export PATH=$(dirname $(out_location {protoc_gen_go})):\\\$PATH && $(out_location {protoc_tool}) {protoc_flags} $SRCS',
        deps = deps + [protoc_tool, protoc_gen_go]
    )
